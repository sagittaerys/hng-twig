{% extends "layout.twig" %}

{% block title %}Manage Tickets - TicketApp{% endblock %}

{% block content %}
<div class="tickets-wrapper">
    <div class="tickets-container">
        <div class="tickets-header">
            <h1 class="tickets-title">Manage Tickets</h1>
            <div class="duex-btns">
                <button class="back-btn" onclick="window.location.href='/dashboard'">
                    ‚Üê Back to Dashboard
                </button>
                <button class="create-btn" onclick="openCreateModal()">
                    + Create Ticket
                </button>
            </div>
        </div>

        <!-- Empty State -->
        {% if tickets|length == 0 %}
        <div class="empty-state">
            <div class="empty-state-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#a78bfa" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                    <polyline points="14 2 14 8 20 8"/>
                </svg>
            </div>
            <h2 class="empty-state-title">No tickets yet</h2>
            <p class="empty-state-text">Create your first ticket to get started</p>
            <button class="create-btn" onclick="openCreateModal()">
                Create Ticket
            </button>
        </div>
        {% else %}
        <!-- Tickets Grid -->
        <div class="tickets-grid">
            {% for ticket in tickets %}
            <div class="ticket-card">
                <div class="ticket-header">
                    <h3 class="ticket-title">{{ ticket.title }}</h3>
                    <span class="status-badge" style="background-color: {{ getStatusColor(ticket.status) }}">
                        {{ getStatusLabel(ticket.status) }}
                    </span>
                </div>
                {% if ticket.description %}
                <p class="ticket-description">{{ ticket.description }}</p>
                {% endif %}
                <div class="ticket-meta">
                    <span class="priority-badge">Priority: {{ ticket.priority }}</span>
                    <div class="ticket-actions">
                        <button class="action-btn edit-btn" onclick='openEditModal({{ ticket|json_encode }})'>
                            Edit
                        </button>
                        <button class="action-btn delete-btn" onclick='openDeleteModal({{ ticket|json_encode }})'>
                            Delete
                        </button>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        {% endif %}
    </div>
</div>

<!-- Create/Edit Modal -->
<div id="ticketModal" class="modal-overlay" style="display: none;" onclick="closeModal()">
    <div class="modal" onclick="event.stopPropagation()">
        <h2 class="modal-header" id="modalTitle">Create New Ticket</h2>

        <form id="ticketForm">
            <input type="hidden" id="ticketId" name="id">
            
            <div class="form-group">
                <label class="form-label">
                    Title <span class="required">*</span>
                </label>
                <input
                    type="text"
                    id="title"
                    name="title"
                    class="form-input"
                    placeholder="Enter ticket title"
                    required
                />
                <p class="error-message" id="titleError"></p>
            </div>

            <div class="form-group">
                <label class="form-label">Description</label>
                <textarea
                    id="description"
                    name="description"
                    class="form-textarea"
                    placeholder="Enter ticket description"
                ></textarea>
                <p class="error-message" id="descriptionError"></p>
            </div>

            <div class="form-group">
                <label class="form-label">
                    Status <span class="required">*</span>
                </label>
                <select id="status" name="status" class="form-select" required>
                    <option value="open">Open</option>
                    <option value="in_progress">In Progress</option>
                    <option value="closed">Closed</option>
                </select>
                <p class="error-message" id="statusError"></p>
            </div>

            <div class="form-group">
                <label class="form-label">Priority</label>
                <select id="priority" name="priority" class="form-select">
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                </select>
            </div>

            <div class="modal-actions">
                <button type="button" class="modal-btn modal-btn-secondary" onclick="closeModal()">
                    Cancel
                </button>
                <button type="submit" class="modal-btn modal-btn-primary" id="submitBtn">
                    Create
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal-overlay" style="display: none;" onclick="closeDeleteModal()">
    <div class="confirm-modal" onclick="event.stopPropagation()">
        <h3 class="confirm-title">Delete Ticket</h3>
        <p class="confirm-text" id="deleteText">
            Are you sure you want to delete this ticket? This action cannot be undone.
        </p>
        <div class="confirm-actions">
            <button class="confirm-btn confirm-btn-cancel" onclick="closeDeleteModal()">
                Cancel
            </button>
            <button class="confirm-btn confirm-btn-danger" onclick="confirmDelete()">
                Delete
            </button>
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="toast" style="display: none;"></div>
{% endblock %}

{% block scripts %}
<script>
let editingTicketId = null;
let deletingTicketId = null;

function getStatusColor(status) {
    switch (status) {
        case 'open': return '#10b981';
        case 'in_progress': return '#f59e0b';
        case 'closed': return '#6b7280';
        default: return '#6b7280';
    }
}

function getStatusLabel(status) {
    switch (status) {
        case 'open': return 'Open';
        case 'in_progress': return 'In Progress';
        case 'closed': return 'Closed';
        default: return status;
    }
}

function showToast(message, type) {
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.className = `toast ${type}`;
    toast.style.display = 'block';
    
    setTimeout(() => {
        toast.style.display = 'none';
    }, 3000);
}

function openCreateModal() {
    editingTicketId = null;
    document.getElementById('modalTitle').textContent = 'Create New Ticket';
    document.getElementById('submitBtn').textContent = 'Create';
    document.getElementById('ticketForm').reset();
    document.getElementById('ticketId').value = '';
    clearErrors();
    document.getElementById('ticketModal').style.display = 'flex';
}

function openEditModal(ticket) {
    editingTicketId = ticket.id;
    document.getElementById('modalTitle').textContent = 'Edit Ticket';
    document.getElementById('submitBtn').textContent = 'Update';
    document.getElementById('ticketId').value = ticket.id;
    document.getElementById('title').value = ticket.title;
    document.getElementById('description').value = ticket.description || '';
    document.getElementById('status').value = ticket.status;
    document.getElementById('priority').value = ticket.priority;
    clearErrors();
    document.getElementById('ticketModal').style.display = 'flex';
}

function closeModal() {
    document.getElementById('ticketModal').style.display = 'none';
    document.getElementById('ticketForm').reset();
    clearErrors();
}

function openDeleteModal(ticket) {
    deletingTicketId = ticket.id;
    document.getElementById('deleteText').textContent = 
        `Are you sure you want to delete "${ticket.title}"? This action cannot be undone.`;
    document.getElementById('deleteModal').style.display = 'flex';
}

function closeDeleteModal() {
    document.getElementById('deleteModal').style.display = 'none';
    deletingTicketId = null;
}

function clearErrors() {
    document.getElementById('titleError').textContent = '';
    document.getElementById('descriptionError').textContent = '';
    document.getElementById('statusError').textContent = '';
    document.querySelectorAll('.form-input, .form-textarea, .form-select').forEach(el => {
        el.classList.remove('error');
    });
}

document.getElementById('ticketForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    clearErrors();
    
    const formData = new FormData(this);
    const url = editingTicketId ? '/tickets/update' : '/tickets';
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast(result.message, 'success');
            closeModal();
            setTimeout(() => window.location.reload(), 1000);
        } else {
            if (result.errors) {
                for (const [field, error] of Object.entries(result.errors)) {
                    document.getElementById(`${field}Error`).textContent = error;
                    document.getElementById(field).classList.add('error');
                }
            }
            showToast('Please fix the errors in the form.', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred. Please try again.', 'error');
    }
});

async function confirmDelete() {
    if (!deletingTicketId) return;
    
    const formData = new FormData();
    formData.append('id', deletingTicketId);
    
    try {
        const response = await fetch('/tickets/delete', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast(result.message, 'success');
            closeDeleteModal();
            setTimeout(() => window.location.reload(), 1000);
        } else {
            showToast(result.message || 'Failed to delete ticket', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred. Please try again.', 'error');
    }
}
</script>

<style>
.duex-btns {
    display: flex;
    gap: 1rem;
}

@media (max-width: 768px) {
    .duex-btns {
        flex-direction: column;
        width: 100%;
    }
    
    .back-btn, .create-btn {
        width: 100%;
    }
}
</style>
{% endblock %}